name: scom_bundle
on:
  push:
    branches:
      - main
      - feature/modification
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even without trigger keywords'
        required: false
        default: 'false'
        type: boolean
jobs:
  check_build_trigger:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check if build should be triggered
        id: check
        run: |
          # 如果是手动触发，检查force_build参数
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "✅ Manual trigger with force_build=true"
              exit 0
            fi
          fi
          
          # 如果推送到main分支，总是构建
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "✅ Push to main branch - build triggered"
            exit 0
          fi
          
          # 如果推送到feature分支，检查commit message
          if [[ "${{ github.ref }}" == "refs/heads/feature/modification" ]]; then
            # 获取最新的commit message
            COMMIT_MSG=$(git log -1 --pretty=format:"%s %b")
            echo "Commit message: $COMMIT_MSG"
            
            # 检查是否包含触发构建的关键词
            if echo "$COMMIT_MSG" | grep -iE '\[build\]|\[release\]|\[package\]|--build|--release|--package' > /dev/null; then
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "✅ Feature branch commit with build trigger keyword found"
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
              echo "⏭️  Feature branch commit without build trigger keyword - skipping build"
            fi
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "⏭️  Branch not configured for builds"
          fi

  build:
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.should_build == 'true'
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools python-dotenv nuitka
          python -m pip install -r requirements.txt

      - name: Get branch info and version
        id: info
        shell: bash
        run: |
          # 获取分支名
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "branch_name=${BRANCH}" >> $GITHUB_OUTPUT
          
          # 判断是否为feature分支
          if [[ "$BRANCH" == "feature/modification" ]]; then
            echo "is_feature=true" >> $GITHUB_OUTPUT
            echo "branch_suffix=-feature" >> $GITHUB_OUTPUT
          else
            echo "is_feature=false" >> $GITHUB_OUTPUT
            echo "branch_suffix=" >> $GITHUB_OUTPUT
          fi
          
          # 获取版本号
          VERSION=$(grep 'VERSION=' .env | cut -d '=' -f2 | tr -d "'\"")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build package
        run: |
          python setup.py build ${{ steps.info.outputs.is_feature == 'true' && '--feature' || '' }}

      - name: Find generated package
        id: find_package
        shell: bash
        run: |
          if [[ "${{ steps.info.outputs.is_feature }}" == "true" ]]; then
            PACKAGE=$(ls SCOM-feature-*.zip)
          else
            PACKAGE=$(ls SCOM-*.zip | grep -v feature)
          fi
          echo "package_name=${PACKAGE}" >> $GITHUB_OUTPUT
          echo "PACKAGE=${PACKAGE}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.info.outputs.version }}${{ steps.info.outputs.branch_suffix }}
          release_name: SCOM-v${{ steps.info.outputs.version }}${{ steps.info.outputs.is_feature == 'true' && ' (Feature Branch)' || '' }}
          draft: false
          prerelease: ${{ steps.info.outputs.is_feature == 'true' }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./${{ env.PACKAGE }}
          asset_name: ${{ env.PACKAGE }}
          asset_content_type: application/zip